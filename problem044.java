package project_beuler;

public class problem044 {
	
//	Pentagonal numbers are generated by the formula, P_n=n(3n−1)/2.
//	The first ten pentagonal numbers are:
//
//	1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//
//	It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
//	However, their difference, 70 − 22 = 48, is not pentagonal.
//
//	Find the pair of pentagonal numbers, Pj and Pk,
//	for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised;
//	what is the value of D?

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		long distance = Integer.MAX_VALUE;
		
		for(int j = 1; pentagonal(j+1) - pentagonal(j) < distance; j++) {
			for(int k = j+1; pentagonal(k) - pentagonal(j) < Math.min(distance, 10000000); k++) { //arbitrary large depth
				if(
					isPentagonal( pentagonal(k) - pentagonal(j) ) &&
					isPentagonal( pentagonal(j) + pentagonal(k) )
				) {
					System.out.println(j+" "+k);
					distance = Math.min(distance, pentagonal(k) - pentagonal(j));
				}
			}
		}
		System.out.println(distance);
		
		
	}
	public static long pentagonal(long n) {
		return n * (3*n-1) /2;
	}
	public static boolean isPentagonal(long P) {
		int i = 1;
		while(pentagonal(i) < P)  i++;
		return pentagonal(i) == P;
	}

}
